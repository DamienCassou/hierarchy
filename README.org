* Hierarchy

[[https://travis-ci.org/DamienCassou/hierarchy.svg?branch%3Dmaster][https://travis-ci.org/DamienCassou/hierarchy.svg?branch=master]]
[[https://coveralls.io/repos/github/DamienCassou/hierarchy/badge.svg?branch%3Dmaster][https://coveralls.io/repos/github/DamienCassou/hierarchy/badge.svg?branch=master]]

** Summary

Library to create, query, navigate and display hierarchy structures.

** Installing

Use [[http://melpa.org/][melpa]].

** Using

After having created a hierarchy with ~hierarchy-new~, populate it by
calling ~hierarchy-add-tree~ or ~hierarchy-add-trees~.  You can
then optionally sort its element with ~hierarchy-sort~. For example,
you can create an animal hierarchy by passing a child-to-parent
function to ~hierarchy-add-tree~:

#+BEGIN_SRC emacs-lisp :session animals
  (require 'hierarchy)

  (setq animals (hierarchy-new))

  (let ((parentfn
         ;; Given an item, return its parent
         (lambda (item)
           (cl-case item
             (dove 'bird)
             (pigeon 'bird)
             (bird 'animal)
             (dolphin 'animal)
             (cow 'animal)))))
    (hierarchy-add-tree animals 'dove parentfn)
    (hierarchy-add-tree animals 'pigeon parentfn)
    (hierarchy-add-tree animals 'dolphin parentfn)
    (hierarchy-add-tree animals 'cow parentfn))

  (hierarchy-sort animals)
#+END_SRC

#+RESULTS:
| bird | animal |

You can learn more about your hierarchy by using functions such as
~hierarchy-roots~, ~hierarchy-length~, ~hierarchy-children~,
~hierarchy-descendant-p~. For example, ~hierarchy-roots~ returns any
item without a parent in a hierarchy:

#+BEGIN_SRC emacs-lisp :session animals :exports both
(hierarchy-roots animals)
#+END_SRC

#+RESULTS:
| animal |

~animal~ is the only item of the ~animals~ hierarchy with no
parent. To get all items with no child, use ~hierarchy-leafs~:

#+BEGIN_SRC emacs-lisp :session animals :exports both
(hierarchy-leafs animals)
#+END_SRC

#+RESULTS:
| dove | pigeon | dolphin | cow |

It is possible to get the children of an item by using
~hierarchy-children~:

#+BEGIN_SRC emacs-lisp :session animals :exports both
(hierarchy-children animals 'animal)
#+END_SRC

#+RESULTS:
| bird | cow | dolphin |

We see here that ~animal~ has three children.

You can navigate a hierarchy using ~hierarchy-map-item~,
~hierarchy-map~ and ~hierarchy-map-tree~. For example, this code
inserts a text view of a hierarchy in a buffer:

#+BEGIN_SRC emacs-lisp :session animals :exports both
  (with-temp-buffer
    (hierarchy-map
     (hierarchy-labelfn-indent
      (lambda (animal _) (insert (symbol-name animal) "\n")))
     animals)
    (buffer-substring (point-min) (point-max)))
#+END_SRC

#+RESULTS:
: animal
:   bird
:     dove
:     pigeon
:   cow
:   dolphin

The indentation between a parent and its child can be configured by
passing one more parameter to ~hierarchy-labelfn-indent~. You can also
display clickable buttons instead of just plain text using either
~hierarchy-labelfn-button~ or ~hierarchy-labelfn-button-if~.

If you want a buffer containing only a hierarchy while being able to
navigate it with standard key-bindings use either
~hierarchy-tabulated-display~ or ~hierarchy-convert-to-tree-widget~ as
shown in below animated pictures.

#+BEGIN_SRC emacs-lisp :session animals :exports code
  (switch-to-buffer
   (hierarchy-tabulated-display
    animals
    (hierarchy-labelfn-indent
     (hierarchy-labelfn-button
      (lambda (item _) (insert (symbol-name item)))
      (lambda (item _) (message "You clicked on: %s" item))))))
#+END_SRC

#+RESULTS:
: #<buffer hierarchy-tabulated<2>>

[[file:media/animals-tabulated-anime.gif]]

#+BEGIN_SRC emacs-lisp :session animals :exports code
  (let ((buffer (generate-new-buffer "hierarchy-animals")))
    (switch-to-buffer buffer)
    (widget-create
     (hierarchy-convert-to-tree-widget
      animals
      (lambda (item _) (insert (symbol-name item)))))
    (setq-local buffer-read-only t))
#+END_SRC

#+RESULTS:
: t

[[file:media/animals-tree-anime.gif]]

** Examples
This library can be used to manipulate any kind of hierarchy. The
following demonstrates this claim.
*** File-system example
The hierarchy library can be used to display any kind of hierarchy you
need. For example, the file ~./examples/hierarchy-examples-fs.el~
contains some code to display file hierarchies:

#+BEGIN_SRC emacs-lisp :session animals :exports code
  (load "./examples/hierarchy-examples-fs.el")

  ;; Execute one of the following lines to show the `.emacd.d' hierarchy
  ;; in either a tabulated list or a tree widget. This takes around 3
  ;; seconds on my computer.

  (hierarchy-examples-fs-display-filesystem "~/.emacs.d")

  (hierarchy-examples-fs-display-filesystem-tree "~/.emacs.d")
#+END_SRC

#+RESULTS:
: #<buffer *hierarchy-examples-fs-tree*>

[[file:media/files-tabulated-anime.gif]]

[[file:media/files-tree-anime.gif]]

** Contributing

Yes, please do! See [[file:CONTRIBUTING.md][CONTRIBUTING]] for guidelines.

** License

See [[file:COPYING][COPYING]]. Copyright (c) 2017 Damien Cassou.
